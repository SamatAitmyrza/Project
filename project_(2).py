# -*- coding: utf-8 -*-
"""project (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14w1VulWP0Sg7e9MqlXR6oSRS61tYldg7

# Parsing data from krisha.kz
"""

!pip3 install beautifulsoup4

import requests
from bs4 import BeautifulSoup
import pandas as pd

HOST = 'https://krisha.kz/'
URL = 'https://krisha.kz/prodazha/kvartiry/almaty/'

def get_content(html):
    soup = BeautifulSoup(html, 'html.parser')
    items = soup.find_all('div', class_='a-card__inc')
    gadgets = []

    for item in items:
        gadgets.append(
            {
                'title': item.find('div', class_='a-card__header-left').get_text(strip=True),
                'location': item.find('div', class_='a-card__wrapper-subtitle').get_text(strip=True),
                'price': item.find('div', class_='a-card__price').get_text(strip=True),
                'preview': item.find('div', class_='a-card__text-preview').get_text(strip=True)
            }
        )

    return gadgets


def parse(web, number, params=None,):
    html = requests.get(web, params=params)

    if html.status_code == 200:
        data = []
        for i in range(number):
            site = f'{web}' + f'/page-{i}/'
            data.extend(get_content(requests.get(site, params=params).text))

        return data

temp = pd.DataFrame(parse(web=URL, number=2))
temp = pd.concat([temp])
temp

"""# Data Preprocessing"""

import pandas as pd
import re


raw_df = pd.read_csv('/content/My project.csv')

raw_df.head()

raw_df.info()

# delete the column we don't need
raw_df.drop('Unnamed: 0', axis=1, inplace=True)


# X
raw_df['title'] = raw_df['title'].apply(lambda x: x.replace('Все заметкиУдалит', ',3'))
raw_df['title'] = raw_df['title'].apply(lambda x: x.replace(x[x.find('/'):], ''))
raw_df['title'] = raw_df['title'].apply(lambda x: re.sub(r'\D+', ', ', x))


# remove unnecessary characters and leave only 
raw_df['price'] = raw_df['price'].apply(lambda x: re.sub("[^0-9]", "", x))


# We are looking for information about districts, since all districts 
# are written the same way and searched by the end of the word
raw_df['location'] = raw_df['location'].apply(lambda x: x[:x.find('ский')+4])



# Clear out all unnecessary information
raw_df['preview'] = raw_df['preview'].apply(lambda x: x.replace(x[x.find('жил. комплекс'):x.find(', ')+2], ''))
raw_df['preview'] = raw_df['preview'].apply(lambda x: x[:x.find('санузел')+10], '')
raw_df['preview'] = raw_df['preview'].apply(lambda x: x[:x.find('г.п')-1])

raw_df.head()

import re


# Parsing the data from the header
temp = raw_df['title'].str.split(',', 3).tolist()
for i in temp:
    if len(i) == 4:
        del i[2]

title_column_splited = pd.DataFrame(temp, columns = ['room','area','floor'])
raw_df['room'] = title_column_splited['room']
raw_df['area'] = title_column_splited['area']
raw_df['floor'] = title_column_splited['floor'].apply(lambda x: re.sub("[^0-9]", "", x))

# Delete the column with the header because we have already partitioned the data
raw_df.drop(['title'], axis=1, inplace=True)



# Parsing house type data
home_type = ('панельный', 'монолитный', 'кирпичный')
raw_df = raw_df[[x.startswith(home_type) for x in raw_df['preview']]]
raw_df = raw_df.reset_index(drop=True)

preview_column_splited = pd.DataFrame(raw_df['preview'].str.split(',',1).tolist(),
                                      columns = ['type','build year'])
raw_df['type'] = preview_column_splited['type']
raw_df['build year'] = preview_column_splited['build year']

# Delete the column because the information has already been parsed
raw_df.drop(['preview'], axis=1, inplace=True)



# Parsing district data
district = ('Бостандыкский', 'Медеуский', 'Ауэзовский', 'Алмалинский', 'Жетысуский', 
            'Турксибский', 'Алатауский', 'Наурызбайский')
raw_df = raw_df[[x.startswith(district) for x in raw_df['location']]]
raw_df = raw_df.reset_index(drop=True)

raw_df.head()

#here we fix the types
raw_df['room'] = raw_df['room'].apply(lambda x: int(x))
raw_df['area'] = raw_df['area'].apply(lambda x: float(x))
raw_df['price'] = raw_df['price'].apply(lambda x: int(x))
raw_df['build year'] = raw_df['build year'].apply(lambda x: int(x))
raw_df['floor'] = raw_df['floor'].apply(lambda x: int(x))

raw_df.info()

df = raw_df[['location', 'build year', 'floor', 'type', 'room', 'area', 'price']]

#delete raw dateframe
del raw_df

df.head()

df.info()

"""# Data visualization"""

import matplotlib.pyplot as plt

df['location'].value_counts().plot.pie(autopct='%1.1f%%', shadow=True, figsize=(8,8))
plt.title('Number of announcements as a percentage of sales by neighborhoods ')
plt.show()

df['type'].value_counts().plot.pie(autopct='%1.1f%%', shadow=True, figsize=(8,8))
plt.title('Number of house types in percentage by district')
plt.show()

twenty_first = df[(df['build year'] >= 2010) & (df['build year'] <= 2099)]
twenty_first['build year'].value_counts().plot.pie(autopct='%1.1f%%', shadow=True, figsize=(8,8))
plt.title('Number of house build year in percentage by district')
plt.show()

ma = df.groupby(['location'])['area'].mean().sort_values()
mp = df.groupby(['location'])['price'].mean().sort_values()

plt.barh(district, (mp / ma).sort_values())
plt.title('Districts vs Mean price per sq.m')
plt.xlabel('Price per sq.m')
plt.show()

twenty = df[(df['build year'] >= 1900) & (df['build year'] <= 1999)]
twenty_first = df[(df['build year'] >= 2000) & (df['build year'] <= 2099)]

sqm_20 = twenty['price'].mean() / twenty['area'].mean()
print(f"Средняя площадь квартир 20 века: {twenty['area'].mean():.1f}")
print("Средняя цена квартир 20 века: {:,.0f}".format(twenty['price'].mean()))
print("Средняя цена rквадратного метра в 20 веку: {:,.0f}".format(sqm_20))

print('\n')

sqm_21 = twenty_first['price'].mean() / twenty_first['area'].mean()
print(f"Средняя площадь квартир 21 века: {twenty_first['area'].mean():.1f}")
print("Средняя цена квартир 21 века: {:,.0f}".format(twenty_first['price'].mean()))
print("Средняя цена rквадратного метра в 21 веку: {:,.0f}".format(sqm_21))

print('\n')

print(f'Прирост цены за квадратный метр составило {sqm_21/sqm_20*100 - 100:.0f}%')

"""# Data analysis / Machine Learning model"""

import numpy as np
import pandas as pd


X = df.iloc[:, :-1].values
y = df.iloc[:, -1].values

print(X)
print('\n')
print(y)

from sklearn.preprocessing import LabelEncoder

#transform into integer
le = LabelEncoder()
X[:, 0] = le.fit_transform(X[:, 0])
X[:, 3] = le.fit_transform(X[:, 3])

print(X)
print(y)

from sklearn.model_selection import train_test_split

#splitting dataset to train and test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.005, random_state=1)

print(X_train)
print(y_train)
print('\n')
print(X_test)
print(y_test)

from sklearn.ensemble import RandomForestRegressor

#initialize RandomForestRegressor with 10 trees
#random_state = 0 for get same result in every launch regressor 
regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)
regressor.fit(X_train, y_train)

from sklearn.metrics import mean_absolute_error

#import mean_absolute_error for estimation predict accuracy 
y_pred = regressor.predict(X_test)
print(y_test)
print(y_pred)

print(f'\nMAE: {mean_absolute_error(y_test, y_pred)}')

"""# Summary

**Here we got a pretty good result, the average error was 2.5 million tenge. This is a good indicator because now there is an increase in prices due to pension accruals**
"""